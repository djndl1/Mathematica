#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\begin_modules
algorithm2e
theorems-ams-bytype
theorems-ams-extended-bytype
eqs-within-sections
figs-within-sections
tabs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "tgtermes" "default"
\font_sans "tgheros" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Algorithms
\end_layout

\begin_layout Standard
There are many general classes of problems that arise in discrete mathematics.
\end_layout

\begin_layout Definition
An algorithm is a finite sequence of precise instructions for performing
 a computation or for solving a problem.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard

\series bold
\emph on
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Algorithm
Finding the maximum Element in a Finite Sequence
\end_layout

\begin_layout Algorithm

\series bold
\emph on
procedure 
\series default

\begin_inset Formula $max\left(a_{1},a_{2},\dots,a_{n}\colon\text{integers}\right)$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $max\coloneqq a_{1}$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
for 
\begin_inset Formula $i\coloneqq2$
\end_inset

 to 
\begin_inset Formula $n$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad$
\end_inset


\series bold
\emph on
if 
\begin_inset Formula $max<a_{i}$
\end_inset

 then 
\begin_inset Formula $max\coloneqq a_{i}$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
return 
\begin_inset Formula $max$
\end_inset


\end_layout

\end_inset


\series default
\emph default

\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout LyX-Code
(defun max-integer-iterative (lst)
\end_layout

\begin_layout LyX-Code
  (let ((max (car lst)))
\end_layout

\begin_layout LyX-Code
    (dolist (num (cdr lst))
\end_layout

\begin_layout LyX-Code
      (if (< max num)
\end_layout

\begin_layout LyX-Code
          (setf max num)))
\end_layout

\begin_layout LyX-Code
    max))
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
(defun max-integer-recursive (lst)   
\end_layout

\begin_layout LyX-Code
    (if (eql (length lst) 1)       
\end_layout

\begin_layout LyX-Code
        (car lst)       
\end_layout

\begin_layout LyX-Code
        (let ((max (car lst)) 
\end_layout

\begin_layout LyX-Code
            (max-cdr (max-integer (cdr lst))))          
\end_layout

\begin_layout LyX-Code
            (if (< max max-cdr)
\end_layout

\begin_layout LyX-Code
                max-cdr
\end_layout

\begin_layout LyX-Code
                max)))) 
\end_layout

\begin_layout Paragraph
There are several properties that algorithms generally share.
\end_layout

\begin_layout Description
Input An algorithm has input values from a specified set.
\end_layout

\begin_layout Description
Output From each set of input values an algorithm produces output values
 from a specified set.
 The output values are the solution to the problem.
\end_layout

\begin_layout Description
Definiteness The steps of an algorithm must be defined precisely.
\end_layout

\begin_layout Description
Correctness An algorithm should produce the correct output values for each
 set of input values.
\end_layout

\begin_layout Description
Finiteness An algorithm should produce the desired output after a finite
 number of steps for any input in the set.
\end_layout

\begin_layout Description
Effectiveness It must be possible to perform each step of an algorithm exactly
 and in a finite amount of time.
\end_layout

\begin_layout Description
Generality The procedure should be applicable for all problems of the desired
 form, not just for a particular set of input values.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsection
Searching
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Algorithm
The linear search algorithm/sequential search
\end_layout

\begin_layout Algorithm

\series bold
\emph on
procedure 
\series default
\emph default

\begin_inset Formula $linear\,search\left(x\colon\text{integer},a_{1},a_{2},\dots,a_{n}\colon\text{ distinct integers}\right)$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $i\coloneqq1$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
while 
\begin_inset Formula $\left(i\leq n\text{ and }x\neq a_{i}\right)$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad i\coloneqq i+1$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
if 
\begin_inset Formula $i\leq n$
\end_inset

 then 
\begin_inset Formula $location\coloneqq i$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
else 
\begin_inset Formula $location\coloneqq0$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
return 
\begin_inset Formula $location$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Algorithm
The Binary Search Algorithm
\end_layout

\begin_layout Algorithm

\series bold
\emph on
procedure 
\series default
\emph default

\begin_inset Formula $binary\,search\left(x\colon\text{integer},a_{1},a_{2},\dots,a_{n}\colon\text{increasing integers}\right)$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $i\coloneqq1$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $j\coloneqq n$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
while 
\begin_inset Formula $i<j$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad m\coloneqq\lfloor\left(i+j\right)/2\rfloor$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad$
\end_inset


\series bold
\emph on
if 
\begin_inset Formula $x>a_{m}$
\end_inset

 then 
\begin_inset Formula $i\coloneqq m+1$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad$
\end_inset


\series bold
\emph on
else 
\begin_inset Formula $j\coloneqq m$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
if 
\begin_inset Formula $x=a_{i}$
\end_inset

 then 
\begin_inset Formula $location\coloneqq i$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
else 
\begin_inset Formula $location=0$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
return 
\begin_inset Formula $location$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Sorting
\end_layout

\begin_layout Standard
Sorting is putting the elements into a list in which the elements are in
 increasing order.
 An amazingly large percentage of computing resources is devoted to sorting
 one thing or another.
 More than 
\begin_inset Formula $100$
\end_inset

 sorting algorithms have been devised.
\end_layout

\begin_layout Subsubsection
Bubble sort
\end_layout

\begin_layout Standard
The bubble sort is one of the simplest sorting algorithms, but not one of
 the most efficient.
 It puts a list into increasing order successively comparing adjacent elements,
 interchanging them if they are in the wrong order.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Algorithm
The bubble sort
\end_layout

\begin_layout Algorithm

\series bold
\emph on
procedure 
\series default
\emph default

\begin_inset Formula $bubblesort\left(a_{1},\dots,a_{n}\colon\text{ real numbers with }n\geq2\right)$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
for 
\begin_inset Formula $i\coloneqq1$
\end_inset

 to 
\begin_inset Formula $n-1$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad$
\end_inset


\series bold
\emph on
for 
\begin_inset Formula $j\coloneqq1$
\end_inset

 to 
\begin_inset Formula $n-i$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad\quad$
\end_inset


\series bold
\emph on
if 
\begin_inset Formula $a_{j}>a_{j+1}$
\end_inset

 then 
\series default
interchange 
\begin_inset Formula $a_{j}$
\end_inset

 and 
\begin_inset Formula $a_{j+1}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
insertion sort
\end_layout

\begin_layout Standard
In general, in the 
\begin_inset Formula $j$
\end_inset

th step of the insertion sort, the 
\begin_inset Formula $j$
\end_inset

th element of the list is inserted into the correct position in the list
 of the previously sorted 
\begin_inset Formula $j-1$
\end_inset

 elements.
 To insert the 
\begin_inset Formula $j$
\end_inset

th element in the list, a linear search technique is used.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Algorithm
The insertion sort
\end_layout

\begin_layout Algorithm

\series bold
\emph on
procedure 
\series default

\begin_inset Formula $insertion\,sort\left(a_{1},a_{2},\dots,a_{n}\colon\text{real numbers with }n\geq2\right)$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
for 
\begin_inset Formula $j\coloneqq2$
\end_inset

 to 
\begin_inset Formula $n$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad i\coloneqq1$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad$
\end_inset


\series bold
\emph on
while 
\begin_inset Formula $a_{j}>a_{i}$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad\quad i\coloneqq i+1$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\hspace*{1em}m\coloneqq a_{j}$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad$
\end_inset


\series bold
\emph on
for 
\begin_inset Formula $k\coloneqq0$
\end_inset

 to 
\begin_inset Formula $j-i-1$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad\quad a_{j-k}\coloneqq a_{j-k-1}$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad a_{i}\coloneqq m$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Greedy Algorithms
\end_layout

\begin_layout Definition
greedy algorithms
\end_layout

\begin_layout Definition
Algorithms that make what seems to be the 
\begin_inset Quotes eld
\end_inset

best
\begin_inset Quotes erd
\end_inset

 choice at each step are called 
\emph on
greedy algorithms.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Algorithm
Greedy Change-Making Algorithm
\end_layout

\begin_layout Algorithm

\series bold
\emph on
procedure 
\series default
\emph default

\begin_inset Formula $change\left(c_{1},c_{2},\dots,c_{r}\colon\text{values of denominations of coins where }\right)$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $c_{1}>c_{2}>\cdots>c_{r};n\colon\text{a positive integer}$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
for 
\begin_inset Formula $i\coloneqq1$
\end_inset

 to 
\begin_inset Formula $r$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad d_{i}\coloneqq0$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad$
\end_inset


\series bold
\emph on
while 
\series default
\emph default

\begin_inset Formula $n\geq c_{i}$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad\quad d_{i}\coloneqq d_{i}+1$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad\quad n\coloneqq n-c_{i}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are sets of coins for which the greedy algorithm does not necessarily
 produce change using the fewest coins possible.
 For example, 
\begin_inset Formula $\left(25,10,1\right)$
\end_inset

 to change 
\begin_inset Formula $30$
\end_inset

.
\end_layout

\begin_layout Theorem
The greedy Change-Making algorithm produces change using the fewest coins
 possible.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Algorithm
Greedy Algorithm for Scheduling Talks
\end_layout

\begin_layout Algorithm

\series bold
\emph on
procedure 
\series default
\emph default

\begin_inset Formula $(s_{1}\leq s_{2}\leq\cdots\leq s_{n}\colon\text{ start times of talks}$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad e_{1}\leq e_{2}\leq\cdots\leq e_{n}\colon\text{ ending times of talks})$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $S\coloneqq\emptyset$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
for 
\begin_inset Formula $j\coloneqq1$
\end_inset

 to 
\begin_inset Formula $n$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad$
\end_inset


\series bold
\emph on
if 
\series default
talk 
\begin_inset Formula $j$
\end_inset

 is compatible with 
\begin_inset Formula $S$
\end_inset

 
\series bold
\emph default
then
\end_layout

\begin_layout Algorithm
\begin_inset Formula $\quad\quad S\coloneqq S\cup\left\{ \text{talk }j\right\} $
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
\emph on
return 
\series default
\emph default

\begin_inset Formula $S$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The Unsolvable Halting Problem
\end_layout

\begin_layout Standard
It asks whether there is a procedure that takes as input a computer program
 and input to the program and determines whether the program will eventually
 stop when run with this input.
\end_layout

\begin_layout Proof
Assume there is a solution 
\begin_inset Formula $H\left(P,I\right)$
\end_inset

 to the problem, which outputs 
\begin_inset Quotes eld
\end_inset

Loops forever
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

halts
\begin_inset Quotes erd
\end_inset

.
 Define another procedure 
\begin_inset Formula $K\left(P\right)$
\end_inset

 that outputs exactly the opposite to 
\begin_inset Formula $H\left(P,P\right)$
\end_inset

.
 
\begin_inset Formula $H\left(K,K\right)$
\end_inset

 yields a contradiction.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
The Growth of Functions
\end_layout

\begin_layout Standard
Big-O notation is used extensively to estimate the number of operations
 an algorithm uses as its input grows.
 With help of this notation, we can determine whether it is practical to
 use a particular algorithm to solve a problem as the size of the input
 increases.
\end_layout

\begin_layout Definition
Big-O notation
\end_layout

\begin_layout Definition
Let 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

 be functions from the set of integers or the set of real numbers to the
 set of real numbers.
 We say that 
\begin_inset Formula $f\left(x\right)$
\end_inset

 is 
\begin_inset Formula $O\left(g\left(x\right)\right)$
\end_inset

 if there are constants 
\begin_inset Formula $C$
\end_inset

 and 
\begin_inset Formula $k$
\end_inset

 s.t
\begin_inset Formula 
\[
\left|f\left(x\right)\right|\leq C\left|g\left(x\right)\right|
\]

\end_inset

whenever 
\begin_inset Formula $x>k$
\end_inset

.
 The constants 
\begin_inset Formula $C$
\end_inset

 and 
\begin_inset Formula $k$
\end_inset

 are called 
\emph on
witness 
\emph default
to the relationship 
\begin_inset Formula $f\left(x\right)$
\end_inset

 is 
\begin_inset Formula $O\left(g\left(x\right)\right)$
\end_inset

.
 We say that two funcitons 
\begin_inset Formula $f\left(x\right)$
\end_inset

 and 
\begin_inset Formula $g\left(x\right)$
\end_inset

 that satisfy both of these big-O relationships are of the 
\emph on
same order.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Theorem
A polynomial of degree 
\begin_inset Formula $n$
\end_inset

 or less is 
\begin_inset Formula $O\left(x^{n}\right)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Proposition
\begin_inset Formula $\log n!$
\end_inset

 is 
\begin_inset Formula $O\left(n\log n\right)$
\end_inset

, taking 
\begin_inset Formula $C=1$
\end_inset

 and 
\begin_inset Formula $k=1$
\end_inset

 as witnesses.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Proposition
\begin_inset Formula $\log_{b}n$
\end_inset

 is 
\begin_inset Formula $O\left(n\right)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $1,\log n,n,n\log n,n^{2},2^{n},n!$
\end_inset


\end_layout

\begin_layout Standard
TODO: plot all the above functions.
\end_layout

\begin_layout Theorem
Suppose that 
\begin_inset Formula $f_{1}\left(x\right)$
\end_inset

 is 
\begin_inset Formula $O\left(g_{1}\left(x\right)\right)$
\end_inset

 and that 
\begin_inset Formula $f_{2}\left(x\right)$
\end_inset

 is 
\begin_inset Formula $O\left(g_{2}\left(x\right)\right)$
\end_inset

.
 Then 
\begin_inset Formula $\left(f_{1}+f_{2}\right)\left(x\right)$
\end_inset

 is 
\begin_inset Formula $O\left(\max\left(\left|g_{1}\left(x\right)\right|,\left|g_{2}\left(x\right)\right|\right)\right)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Corollary
Suppose that 
\begin_inset Formula $f_{1}\left(x\right)$
\end_inset

 and 
\begin_inset Formula $f_{2}\left(x\right)$
\end_inset

 are both 
\begin_inset Formula $O\left(g\left(x\right)\right)$
\end_inset

.
 Then 
\begin_inset Formula $\left(f_{1}+f_{2}\right)$
\end_inset

 is 
\begin_inset Formula $O\left(g\left(x\right)\right)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Theorem
Suppose that 
\begin_inset Formula $f_{1}\left(x\right)$
\end_inset

 is 
\begin_inset Formula $O\left(g_{1}\left(x\right)\right)$
\end_inset

 and 
\begin_inset Formula $f_{2}\left(x\right)$
\end_inset

 is 
\begin_inset Formula $O\left(g_{2}\left(x\right)\right)$
\end_inset

.
 Then 
\begin_inset Formula $\left(f_{1}f_{2}\right)\left(x\right)$
\end_inset

 is 
\begin_inset Formula $O\left(\left(g_{1}g_{2}\right)\left(x\right)\right)$
\end_inset

.
\end_layout

\end_body
\end_document
